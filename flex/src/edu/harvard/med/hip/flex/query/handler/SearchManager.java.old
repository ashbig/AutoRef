/*
 * SearchManager.java
 *
 * Created on July 29, 2003, 11:56 AM
 */

package edu.harvard.med.hip.flex.query.handler;

import java.util.*;
import java.io.*;
import java.sql.*;
import edu.harvard.med.hip.flex.query.core.*;
import edu.harvard.med.hip.flex.user.*;
import edu.harvard.med.hip.flex.database.*;

/**
 *
 * @author  dzuo
 */
public class SearchManager {
    private List searchTerms;
    private String searchType;
    private List params;
    private String searchName;
    private SearchRecord searchRecord;
    private List searchResults;
    private User user;
    private InputStream searchFile;
    
    public void setSearchTerms(List l) {this.searchTerms = l;}
    public void setSearchType(String s) {this.searchType = s;}
    public void setParams(List l) {this.params = l;}
    public void setSearchName(String s) {this.searchName = s;}
    public void setSearchRecord(SearchRecord s) {this.searchRecord = s;}
    public void setSearchResults(List l) {this.searchResults = l;}
    public void setUser(User user) {this.user = user;}
    public void setSearchFile(InputStream searchFile) {this.searchFile = searchFile;}
    
    public List getSearchTerms() {return searchTerms;}
    public String getSearchType() {return searchType;}
    public List getParams() {return params;}
    public String getSearchName() {return searchName;}
    public SearchRecord getSearchRecord() {return searchRecord;}
    public List getSearchResults() {return searchResults;}
    public User getUser() {return user;}
    public InputStream getSearchFile() {return searchFile;}
    
    /** Creates a new instance of SearchManager */
    public SearchManager(InputStream searchFile, String searchType, List params, String searchName, User user) {
        this.searchFile = searchFile;
        this.searchType = searchType;
        this.params = params;
        this.searchName = searchName;
        this.user = user;
    }
    
    public void parseSearchFile() throws FileNotFoundException, IOException {
        searchTerms = new ArrayList();
        BufferedReader in = new BufferedReader(new InputStreamReader(searchFile));
        String line = null;
        while((line = in.readLine()) != null) {
            searchTerms.add(line.trim());
        }
    }
    
    public void createSearchRecord() {
        searchResults = new ArrayList();
        for(int i=0; i<searchTerms.size(); i++) {
            String searchTerm = (String)searchTerms.get(i);
            SearchResult result = new SearchResult(searchTerm);
            searchResults.add(result);
        }
        searchRecord = new SearchRecord(searchName,searchType,SearchRecord.INPROCESS,user.getUsername(), params, searchResults);
    }
    
    public void insertSearchRecord(Connection conn) throws FlexDatabaseException, SQLException {
        String sql = "select max(searchid) from search";
        DatabaseTransaction t = DatabaseTransaction.getInstance();
        ResultSet rs = t.executeQuery(sql);
        if(rs.next()) {
            int searchid = rs.getInt(1);
            searchRecord.setSearchid(searchid+1);
        } else {
            throw new FlexDatabaseException("Error occured while executing query: "+sql);
        }
        DatabaseTransaction.closeResultSet(rs);
            
        sql = "insert into search (searchid, searchname, searchdate, searchtype, searchstatus, username)"+
                    " values (?, ?, sysdate, ?, ?, ?)";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, searchRecord.getSearchid());
        stmt.setString(2, searchRecord.getSearchName());
        stmt.setString(3, searchRecord.getSearchType());
        stmt.setString(4, searchRecord.getSearchStatus());
        stmt.setString(5, searchRecord.getUsername());
        DatabaseTransaction.executeUpdate(stmt);
        DatabaseTransaction.closeStatement(stmt);
        
        sql = "insert into param (paramname, paramvalue, searchid)"+
                    " values (?, ?, ?)";
        stmt = conn.prepareStatement(sql);
        for(int i=0; i<params.size(); i++) {
            Param param = (Param)params.get(i);
            stmt.setString(1, param.getName());
            stmt.setString(2, param.getValue());
            stmt.setInt(3, searchRecord.getSearchid());
            DatabaseTransaction.executeUpdate(stmt);
        }
        DatabaseTransaction.closeStatement(stmt);        
        
        sql = "select max(searchresultid) from searchresult";
        rs = t.executeQuery(sql);
        int searchResultid = 0;
        if(rs.next()) {
            searchResultid = rs.getInt(1);
        } else {
            throw new FlexDatabaseException("Error occured while executing query: "+sql);
        }
        DatabaseTransaction.closeResultSet(rs);
        
        sql = "insert into searchresult(searchresultid, searchterm, searchid)"+
            " values(?,?,?)";
        stmt = conn.prepareStatement(sql);
        List results = searchRecord.getSearchResult();
        for(int i=0; i<results.size(); i++) {
            SearchResult result = (SearchResult)results.get(i);
            result.setSearchResultid(++searchResultid);
            stmt.setInt(1, searchResultid);
            stmt.setString(2, result.getSearchTerm());
            stmt.setInt(3, searchRecord.getSearchid());
            DatabaseTransaction.executeUpdate(stmt);
        }
        DatabaseTransaction.closeStatement(stmt);
    }
    
    public void updateSearchResult(Connection conn) throws FlexDatabaseException, SQLException {
        String sql = "update searchresult set isfound=?,"+
                    " searchmethodid=?" +
                    " where searchresultid=?";
        String sql2 = "insert into matchgenbankrecord (matchgenbankid, genbankaccession, gi, searchresultid)"+
                    " values(?, ?, ?, ?)";
        String sql3 = "insert into matchflexsequence (matchflexid, ismatchbygi, matchgenbankid, flexsequenceid)"+
                    " values(?, ?, ?, ?)";
        String sql4 = "insert into blasthit (matchflexid, querylength, subjectlength)"+
                    " values(?, ?, ?)";
        String sql5 = "insert into blastalignment (blastalignmentid, evalue, identity, querystart, queryend, substart, subend, score, strand, matchflexid)"+
                    " values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String sql6 = "insert into nofound(searchresultid, reason)"+
                    " values(?, ?)";
        PreparedStatement stmt = conn.prepareStatement(sql);
        PreparedStatement stmt2 = conn.prepareStatement(sql2);
        PreparedStatement stmt3 = conn.prepareStatement(sql3);
        PreparedStatement stmt4 = conn.prepareStatement(sql4);
        PreparedStatement stmt5 = conn.prepareStatement(sql5);
        PreparedStatement stmt6 = conn.prepareStatement(sql6);
        
        List results = searchRecord.getSearchResult();
        for(int i=0; i<results.size(); i++) {
            SearchResult result = (SearchResult)results.get(i);
            stmt.setString(1, result.getIsGenbankFound());
            stmt.setString(2, result.getSearchMethod());
            stmt.setInt(3, result.getSearchResultid());
            DatabaseTransaction.executeUpdate(stmt);
        }
        DatabaseTransaction.closeStatement(stmt);
    }
    
    public void doSearch() {
        QueryHandler handler = StaticQueryHandlerFactory.makeQueryHandler(searchType, params);
        handler.handleQuery(searchTerms);
    }
    
}
