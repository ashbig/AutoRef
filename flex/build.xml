<?xml version="1.0" encoding="UTF-8"?>
<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->
<project basedir="." default="compile" name="FLEX">


<!-- Property Definitions.  Each of the following properties are used by       
    convention in this build file.  The values specified can be overridden at       
    run time by adding a "-Dname=value" argument to the command line that       
    invokes Ant.  This technique is normally used to copy the values of       
    the ANT_HOME and TOMCAT_HOME environment variables into the "ant.home" and      
    "tomcat.home" properties, which are normally not defined explicitly.            
    app.name       Base name of this application, used to construct filenames                      
    and directories.             
    deploy.home    The name of the directory into which the deployment                      
                   hierarchy will be created.  Normally, this will be the                      
                   name of a subdirectory under $TOMCAT_HOME/webapps.             
    System.lib     The name of the directory of the tomcat lib directory.
    lib.dir        directory where the included jars/zips are      
    dist.home      The name of the base directory in which distribution files
                   are created.             
    dist.src       The name of the distribution JAR file containing the                      
                   application source code, to be stored in the "dist.home"                      
                   directory.  This filename should end with ".jar".             
    dist.war       The name of the Web ARchive (WAR) file containing our                      
                   deployable application.  This filename should end with                      
                   ".war".             
   javadoc.home   The name of the base directory in which                     
                    the JavaDoc documentation for this application
                    is generated.             
   tomcat.home    The name of the base directory in which                     
                  Tomcat has been installed.normally set automatically from the value                        
                  of the TOMCAT_HOME environment variable.             
                  The FLEX application will be deployed to a subdirectory named "FLEX",      
                  and will therefore be accessible at: 
                  http://localhost:<port>/FLEX -->
     

  <property name="tomcat.home" value="../jakarta-tomcat-3.2.1"/>
  <property name="app.name" value="FLEX"/>
  <property name="deploy.home" value="${tomcat.home}/webapps/${app.name}"/>
  <property name="system.lib" value="${tomcat.home}/lib"/>
  <property name="lib.dir" value="${deploy.home}/lib"/>
  <property name="dist.home" value="${deploy.home}"/>
  <property name="dist.src" value="${app.name}.jar"/>
  <property name="dist.war" value="${app.name}.war"/>
  <property name="javadoc.home" value="${deploy.home}/javadoc"/>
  

<!-- The "prepare" target is used to construct the deployment home            
     directory structure (if necessary), and to copy in static files            
     as required.  In the example below, Ant is instructed to create            
     the deployment directory, copy the contents of the "web/" source            
      hierarchy, and set up the WEB-INF subdirectory appropriately. -->

  <target name="prepare">
    <mkdir dir="${deploy.home}"/>
    <copy todir="${deploy.home}">
      <fileset dir="web"/>
    </copy>
    <mkdir dir="${deploy.home}/WEB-INF"/>
    <copy file="etc/web.xml" tofile="${deploy.home}/WEB-INF/web.xml"/>
    <copy todir="${deploy.home}/WEB-INF">
        <fileset dir="etc" includes="*.tld"/>
    </copy>
    <copy file="etc/struts-config.xml" tofile="${deploy.home}/WEB-INF/struts-config.xml"/>
    <mkdir dir="${deploy.home}/WEB-INF/classes"/>
    <mkdir dir="${deploy.home}/WEB-INF/lib"/>
    <copy todir="${deploy.home}/WEB-INF/lib">
      <fileset dir="lib" includes="*.jar,*.zip"/>
    </copy>
    <copy todir="${system.lib}">
        <fileset dir="lib" includes="poolman.xml,poolman.policy"/>
    </copy>
    <mkdir dir="${javadoc.home}"/>
  </target>


<!-- The "clean" target removes the deployment home directory structure,            
    so that the next time the "compile" target is requested, it will need      
    to compile everything from scratch. -->

  <target name="clean">
    <delete dir="${deploy.home}"/>
    <delete file="${system.lib}/poolman.xml"/>
    <delete file="${system.lib}/poolman.policy"/>
  </target>


<!-- The "compile" target is used to compile (or recompile) the Java classes      
    that make up this web application.  The recommended source code directory      
    structure makes this very easy because the <javac> task automatically            
    works its way down a source code hierarchy and compiles any class that            
    has not yet been compiled, or where the source file is newer than the      
    class file.             
    Feel free to adjust the compilation option parameters (debug,            
    optimize, and deprecation) to suit your requirements.  It is also            
    possible to base them on properties, so that you can adjust this            
    behavior at runtime.             
    The "compile" task depends on the "prepare" task, so the deployment            
    home directory structure will be created if needed the first time. -->

  <target depends="prepare" name="compile">
    <javac classpath="${netbeans.filesystems.path}" debug="on" deprecation="off" destdir="${deploy.home}/WEB-INF/classes" optimize="off" srcdir="src"/>
    <copy todir="${deploy.home}/WEB-INF/classes">
      <fileset dir="src" includes="**/*.properties"/>
    </copy>
  </target>




<!-- The "all" target rebuilds everything by executing the "clean"            target first, which forces the "compile" target to compile all            source code instead of just the files that have been changed. -->

  <target depends="clean,prepare,compile" name="all"/>


<!-- The "dist" target builds the distribution Web ARchive (WAR) file            for this application, suitable for distribution to sites that wish            to install your application.  It also creates a JAR file containing            the source code for this application, if you wish to distribute            that separately. -->

  <target depends="prepare,compile" name="dist">
    <jar basedir="." jarfile="${dist.home}/${dist.src}"/>
    <jar basedir="${deploy.home}" excludes="${dist.war}" jarfile="${dist.home}/${dist.war}"/>
  </target>


</project>
